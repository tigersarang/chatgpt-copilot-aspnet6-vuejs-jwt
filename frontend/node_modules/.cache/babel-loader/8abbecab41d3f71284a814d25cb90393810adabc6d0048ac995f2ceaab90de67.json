{"ast":null,"code":"import axios from \"axios\";\nimport { Console } from \"console\";\nexport default {\n  name: \"Products\",\n  data() {\n    return {\n      products: [],\n      newProduct: {\n        name: \"\",\n        price: 0\n      },\n      editingProduct: null\n    };\n  },\n  mounted() {\n    this.fetchProducts();\n  },\n  methods: {\n    async fetchProducts() {\n      try {\n        const response = await axios.get(\"https://localhost:7009/api/products\");\n        this.products = response.data;\n      } catch (error) {\n        console.log(error);\n      }\n    },\n    editProduct(product) {\n      this.editingProduct = {\n        ...product\n      };\n    },\n    async updateProduct() {\n      try {\n        await axios.put(`https://localhost:7009/api/products/${this.editingProduct.id}`, this.editingProduct);\n        this.fetchProducts();\n        this.editingProduct = null;\n      } catch (error) {\n        console.log(error);\n      }\n    },\n    async deleteProduct(id) {\n      try {\n        await axios.delete(`https://localhost:7009/api/products/${id}`);\n        this.fetchProducts();\n      } catch (error) {\n        console.log(error);\n      }\n    },\n    async addProduct() {\n      try {\n        const authToken = localStorage.getItem(\"authToken\"); // 저장된 토큰을 가져옵니다.\n\n        await axios.post(\"https://localhost:7009/api/products\", this.newProduct, {\n          headers: {\n            Authorization: `Bearer ${authToken}` // 헤더에 토큰을 추가합니다.\n          }\n        });\n\n        this.fetchProducts();\n        this.newProduct.name = \"\";\n        this.newProduct.price = 0;\n      } catch (error) {\n        console.log(error);\n      }\n    },\n    cancelEdit() {\n      this.editingProduct = null;\n    }\n  }\n};","map":{"version":3,"names":["axios","Console","name","data","products","newProduct","price","editingProduct","mounted","fetchProducts","methods","response","get","error","console","log","editProduct","product","updateProduct","put","id","deleteProduct","delete","addProduct","authToken","localStorage","getItem","post","headers","Authorization","cancelEdit"],"sources":["G:\\TEMP_STUDY\\aspnet\\vue-study4\\frontend\\src\\views\\Products.vue"],"sourcesContent":["<template>\r\n    <div class=\"products\">\r\n      <h2>Products</h2>\r\n      <button @click=\"fetchProducts\">Refresh</button>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>ID</th>\r\n            <th>Name</th>\r\n            <th>Price</th>\r\n            <th>Action</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr v-for=\"product in products\" :key=\"product.id\">\r\n            <td>{{ product.id }}</td>\r\n            <td>{{ product.name }}</td>\r\n            <td>{{ product.price }}</td>\r\n            <td>\r\n              <button @click=\"editProduct(product)\">Edit</button>\r\n              <button @click=\"deleteProduct(product.id)\">Delete</button>\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n  \r\n      <div v-if=\"editingProduct\">\r\n        <h3>Edit Product</h3>\r\n        <label>Name: <input v-model=\"editingProduct.name\" /></label>\r\n        <label>Price: <input v-model=\"editingProduct.price\" /></label>\r\n        <button @click=\"updateProduct\">Update</button>\r\n        <button @click=\"cancelEdit\">Cancel</button>\r\n      </div>\r\n  \r\n      <div>\r\n        <h3>Add Product</h3>\r\n        <label>Name: <input v-model=\"newProduct.name\" /></label>\r\n        <label>Price: <input v-model=\"newProduct.price\" /></label>\r\n        <button @click=\"addProduct\">Add</button>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import axios from \"axios\";\r\nimport { Console } from \"console\";\r\n  \r\n  export default {\r\n    name: \"Products\",\r\n    data() {\r\n      return {\r\n        products: [],\r\n        newProduct: { name: \"\", price: 0 },\r\n        editingProduct: null\r\n      };\r\n    },\r\n    mounted() {\r\n      this.fetchProducts();\r\n    },\r\n    methods: {\r\n      async fetchProducts() {\r\n        try {\r\n          const response = await axios.get(\"https://localhost:7009/api/products\");\r\n          this.products = response.data;\r\n        } catch (error) {\r\n          console.log(error);\r\n        }\r\n      },\r\n      editProduct(product) {\r\n        this.editingProduct = { ...product };\r\n      },\r\n      async updateProduct() {\r\n        try {\r\n          await axios.put(`https://localhost:7009/api/products/${this.editingProduct.id}`, this.editingProduct);\r\n          this.fetchProducts();\r\n          this.editingProduct = null;\r\n        } catch (error) {\r\n          console.log(error);\r\n        }\r\n      },\r\n      async deleteProduct(id) {\r\n        try {\r\n          await axios.delete(`https://localhost:7009/api/products/${id}`);\r\n          this.fetchProducts();\r\n        } catch (error) {\r\n          console.log(error);\r\n        }\r\n      },\r\n      async addProduct() {\r\n        try {\r\n            const authToken = localStorage.getItem(\"authToken\"); // 저장된 토큰을 가져옵니다.\r\n             \r\n          await axios.post(\"https://localhost:7009/api/products\",  this.newProduct, {\r\n          headers: {\r\n            Authorization: `Bearer ${authToken}` // 헤더에 토큰을 추가합니다.\r\n          },\r\n          \r\n        });\r\n          this.fetchProducts();\r\n          this.newProduct.name = \"\";\r\n          this.newProduct.price = 0;\r\n        } catch (error) {\r\n          console.log(error);\r\n        }\r\n      },\r\n      cancelEdit() {\r\n        this.editingProduct = null;\r\n      }\r\n    }\r\n  };\r\n  </script>\r\n  "],"mappings":"AA4CE,OAAOA,KAAI,MAAO,OAAO;AAC3B,SAASC,OAAM,QAAS,SAAS;AAE/B,eAAe;EACbC,IAAI,EAAE,UAAU;EAChBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,EAAE;MACZC,UAAU,EAAE;QAAEH,IAAI,EAAE,EAAE;QAAEI,KAAK,EAAE;MAAE,CAAC;MAClCC,cAAc,EAAE;IAClB,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,aAAa,EAAE;EACtB,CAAC;EACDC,OAAO,EAAE;IACP,MAAMD,aAAaA,CAAA,EAAG;MACpB,IAAI;QACF,MAAME,QAAO,GAAI,MAAMX,KAAK,CAACY,GAAG,CAAC,qCAAqC,CAAC;QACvE,IAAI,CAACR,QAAO,GAAIO,QAAQ,CAACR,IAAI;MAC/B,EAAE,OAAOU,KAAK,EAAE;QACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MACpB;IACF,CAAC;IACDG,WAAWA,CAACC,OAAO,EAAE;MACnB,IAAI,CAACV,cAAa,GAAI;QAAE,GAAGU;MAAQ,CAAC;IACtC,CAAC;IACD,MAAMC,aAAaA,CAAA,EAAG;MACpB,IAAI;QACF,MAAMlB,KAAK,CAACmB,GAAG,CAAE,uCAAsC,IAAI,CAACZ,cAAc,CAACa,EAAG,EAAC,EAAE,IAAI,CAACb,cAAc,CAAC;QACrG,IAAI,CAACE,aAAa,EAAE;QACpB,IAAI,CAACF,cAAa,GAAI,IAAI;MAC5B,EAAE,OAAOM,KAAK,EAAE;QACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MACpB;IACF,CAAC;IACD,MAAMQ,aAAaA,CAACD,EAAE,EAAE;MACtB,IAAI;QACF,MAAMpB,KAAK,CAACsB,MAAM,CAAE,uCAAsCF,EAAG,EAAC,CAAC;QAC/D,IAAI,CAACX,aAAa,EAAE;MACtB,EAAE,OAAOI,KAAK,EAAE;QACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MACpB;IACF,CAAC;IACD,MAAMU,UAAUA,CAAA,EAAG;MACjB,IAAI;QACA,MAAMC,SAAQ,GAAIC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,EAAE;;QAEvD,MAAM1B,KAAK,CAAC2B,IAAI,CAAC,qCAAqC,EAAG,IAAI,CAACtB,UAAU,EAAE;UAC1EuB,OAAO,EAAE;YACPC,aAAa,EAAG,UAASL,SAAU,GAAE;UACvC;QAEF,CAAC,CAAC;;QACA,IAAI,CAACf,aAAa,EAAE;QACpB,IAAI,CAACJ,UAAU,CAACH,IAAG,GAAI,EAAE;QACzB,IAAI,CAACG,UAAU,CAACC,KAAI,GAAI,CAAC;MAC3B,EAAE,OAAOO,KAAK,EAAE;QACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;MACpB;IACF,CAAC;IACDiB,UAAUA,CAAA,EAAG;MACX,IAAI,CAACvB,cAAa,GAAI,IAAI;IAC5B;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}